# import * from "./generated/prisma.graphql"

directive @hasRole(role: [Role]) on FIELD | FIELD_DEFINITION

directive @isAuthenticated on FIELD | FIELD_DEFINITION

scalar Upload

type Query {
	#admin
	users(
		where: UserWhereInput
		orderBy: UserOrderByInput
		skip: Int
		after: String
		before: String
		first: Int
		last: Int
	): [User] @hasRole(role: [ADMIN])
	#auth
	me: User @isAuthenticated
	# file
	uploads: [File]
	# business
	businesses(
		where: BusinessWhereInput
		orderBy: BusinessOrderByInput
		skip: Int
		after: String
		before: String
		first: Int
		last: Int
	): [Business]!
}

type Mutation {
	# admin
	subAdminSignUp(data: UserCreateInput!): AuthPayload @hasRole(role: [ADMIN])
	subAdminUpdate(data: UserUpdateInput!, id: ID!): User @hasRole(role: [ADMIN])
	subAdminDelete(id: ID!): User @hasRole(role: [ADMIN])
	# auth
	signUp(data: UserCreateInput!): AuthPayload
	login(name: String!, password: String!): AuthPayload
	# user
	updateProfile(data: UserUpdateInput!): User @isAuthenticated
	# file
	singleUpload(file: Upload!): File! # Upload为Apollo Server自动添加
	# business
	createBusiness(data: BusinessCreateInput!): Business! @hasRole(role: [ADMIN, SUB_ADMIN_1])
	updateBusiness(data: BusinessUpdateInput!, where: BusinessWhereUniqueInput!): Business
		@hasRole(role: [ADMIN, SUB_ADMIN_1])
	deleteBusiness(where: BusinessWhereUniqueInput!): Business @hasRole(role: [ADMIN, SUB_ADMIN_1])
	upsertBusiness(
		where: BusinessWhereUniqueInput!
		create: BusinessCreateInput!
		update: BusinessUpdateInput!
	): Business! @hasRole(role: [ADMIN, SUB_ADMIN_1])
	updateManyBusinesses(data: BusinessUpdateInput!, where: BusinessWhereInput): BatchPayload!
		@hasRole(role: [ADMIN, SUB_ADMIN_1])
	deleteManyBusinesses(where: BusinessWhereInput): BatchPayload! @hasRole(role: [ADMIN, SUB_ADMIN_1])
}

type AuthPayload {
	token: String
	user: User
}
